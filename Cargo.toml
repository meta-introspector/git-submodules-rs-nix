[workspace]
members = [
    ".",
    
    
    "gitoxide",
    "gitoxide/gitoxide-core",
    "gitoxide/gix",
    "gitoxide/gix-actor",
    "gitoxide/gix-archive",
    "gitoxide/gix-attributes",
    "gitoxide/gix-bitmap",
    "gitoxide/gix-blame",
    "gitoxide/gix-chunk",
    "gitoxide/gix-command",
    "gitoxide/gix-commitgraph",
    "gitoxide/gix-config",
    "gitoxide/gix-config/tests",
    "gitoxide/gix-config-value",
    "gitoxide/gix-credentials",
    "gitoxide/gix-date",
    "gitoxide/gix-diff",
    "gitoxide/gix-diff/tests",
    "gitoxide/gix-dir",
    "gitoxide/gix-discover",
    "gitoxide/gix-features",
    "gitoxide/gix-fetchhead",
    "gitoxide/gix-filter",
    "gitoxide/gix-fs",
    "gitoxide/gix-fsck",
    "gitoxide/gix-glob",
    "gitoxide/gix-hash",
    "gitoxide/gix-hashtable",
    "gitoxide/gix-ignore",
    "gitoxide/gix-index",
    "gitoxide/gix-index/tests",
    "gitoxide/gix-lfs",
    "gitoxide/gix-lock",
    "gitoxide/gix-macros",
    "gitoxide/gix-mailmap",
    "gitoxide/gix-merge",
    "gitoxide/gix-negotiate",
    "gitoxide/gix-note",
    "gitoxide/gix-object",
    "gitoxide/gix-odb",
    "gitoxide/gix-odb/tests",
    "gitoxide/gix-pack",
    "gitoxide/gix-packetline",
    "gitoxide/gix-packetline-blocking",
    "gitoxide/gix-pack/tests",
    "gitoxide/gix-path",
    "gitoxide/gix-pathspec",
    "gitoxide/gix-prompt",
    "gitoxide/gix-protocol",
    "gitoxide/gix-quote",
    "gitoxide/gix-rebase",
    "gitoxide/gix-ref",
    "gitoxide/gix-refspec",
    "gitoxide/gix-ref/tests",
    "gitoxide/gix-revision",
    "gitoxide/gix-revwalk",
    "gitoxide/gix-sec",
    "gitoxide/gix-sequencer",
    "gitoxide/gix-shallow",
    "gitoxide/gix-status",
    "gitoxide/gix-status/tests",
    "gitoxide/gix-submodule",
    "gitoxide/gix-tempfile",
    "gitoxide/gix-tix",
    "gitoxide/gix-trace",
    "gitoxide/gix-transport",
    "gitoxide/gix-traverse",
    "gitoxide/gix-traverse/tests",
    "gitoxide/gix-tui",
    "gitoxide/gix-url",
    "gitoxide/gix-utils",
    "gitoxide/gix-validate",
    "gitoxide/gix-worktree",
    "gitoxide/gix-worktree-state",
    "gitoxide/gix-worktree-state/tests",
    "gitoxide/gix-worktree-stream",
    "gitoxide/gix-worktree/tests",
    "gitoxide/tests/it",
    "gitoxide/tests/tools",
    "git_project_reader",
    "git_test_repo",
    
    
    
    
    
    "naersk/docparse",
    
    "project_file_lattice_builder",
    "report-analyzer-rs",
    
    
    "submodule-collector",
    
    
    
    "tools/agent_comms_analysis/response_analyzer",
    
    "tools/crq_table_generator",
    "tools/crq_word_analyzer",
    "tools/incident-submodule-manager",
    "tools/submodule-orchestrator",
    "tools/tool-template",
    "tools/tool-template/prelude",
    "tools/web_spider_corpus_builder",
    "tools/wikidata",
    
    "tools/wikidata/prelude",
    
    
    
 #    "sources/meta-introspector/rmcp-agent",
#    "sources/meta-introspector/ramparts",
#    "sources/meta-introspector/rust-mcp-filesystem",
#    "sources/meta-introspector/turbomcp",
#    "sources/meta-introspector/rust-mcp-sdk/crates/rust-mcp-macros",
#    "sources/meta-introspector/rust-mcp-sdk/crates/rust-mcp-sdk",
#    "sources/meta-introspector/rust-mcp-sdk/crates/rust-mcp-transport",
#    "sources/meta-introspector/paiml-mcp-agent-toolkit",
#    "sources/meta-introspector/memkb-mcp-rust",
#    "sources/meta-introspector/mcp-discovery",
#    "sources/meta-introspector/mcp-attr/mcp-attr",
#    "sources/meta-introspector/mcp-attr/mcp-attr-macros",
#    "sources/meta-introspector/MoCoPr",
#    "sources/meta-introspector/monomcp-rust/monomcp/monomcp-core",
#    "sources/meta-introspector/monomcp-rust/monomcp/MoCoPr",
#    "sources/meta-introspector/monomcp-rust/monomcp/agentic/crates/agentic-core",
#    "sources/meta-introspector/monomcp-rust/monomcp/agentic/crates/agentic-tui",
#    "sources/meta-introspector/monomcp-rust/monomcp/agentic/crates/starlit-gui",
#    "sources/meta-introspector/monomcp-rust/monomcp/mcp-attr/codegen",
#    "sources/meta-introspector/monomcp-rust/monomcp/mcp-attr/mcp-attr-macros",
#    "sources/meta-introspector/monomcp-rust/monomcp/mcp-attr/mcp-attr",
#    "sources/meta-introspector/monomcp-rust/monomcp/mcp-discovery",
#    "sources/meta-introspector/monomcp-rust/monomcp/memkb-mcp-rust",
#    "sources/meta-introspector/monomcp-rust/monomcp/paiml-mcp-agent-toolkit/server",
#    "sources/meta-introspector/monomcp-rust/monomcp/ramparts", needs cranlift and crashes
#    "sources/meta-introspector/monomcp-rust/monomcp/rmcp-agent",
#    "sources/meta-introspector/monomcp-rust/monomcp/rust-mcp-filesystem",
#    "sources/meta-introspector/monomcp-rust/monomcp/rust-mcp-sdk/crates/rust-mcp-macros",
#    "sources/meta-introspector/monomcp-rust/monomcp/rust-mcp-sdk/crates/rust-mcp-sdk",
#    "sources/meta-introspector/monomcp-rust/monomcp/rust-mcp-sdk/crates/rust-mcp-transport",
#    "sources/meta-introspector/monomcp-rust/monomcp/rust-mcp-sdk/examples/simple-mcp-client",
#    "sources/meta-introspector/monomcp-rust/monomcp/rust-mcp-sdk/examples/simple-mcp-client-core",
#    "sources/meta-introspector/monomcp-rust/monomcp/rust-mcp-sdk/examples/hello-world-mcp-server",
#    "sources/meta-introspector/monomcp-rust/monomcp/rust-mcp-sdk/examples/hello-world-mcp-server-core",
#    "sources/meta-introspector/monomcp-rust/monomcp/rust-mcp-sdk/examples/hello-world-server-streamable-http",
#    "sources/meta-introspector/monomcp-rust/monomcp/rust-mcp-sdk/examples/hello-world-server-core-streamable-http",
#    "sources/meta-introspector/monomcp-rust/monomcp/rust-mcp-sdk/examples/simple-mcp-client-sse",
#    "sources/meta-introspector/monomcp-rust/monomcp/rust-mcp-sdk/examples/simple-mcp-client-core-sse",
#    "sources/meta-introspector/monomcp-rust/monomcp/siumai",
#    "sources/meta-introspector/monomcp-rust/monomcp/MoCoPr/mocopr-client",
#    "sources/meta-introspector/monomcp-rust/monomcp/MoCoPr/mocopr-core",
#    "sources/meta-introspector/monomcp-rust/monomcp/MoCoPr/mocopr-macros",
#    "sources/meta-introspector/monomcp-rust/monomcp/MoCoPr/mocopr-rbac",
#    "sources/meta-introspector/monomcp-rust/monomcp/MoCoPr/mocopr-server",
#    "sources/meta-introspector/monomcp-rust/monomcp/turbomcp/crates/turbomcp",
#    "sources/meta-introspector/monomcp-rust/monomcp/turbomcp/crates/turbomcp-cli",
#    "sources/meta-introspector/monomcp-rust/monomcp/turbomcp/crates/turbomcp-client",
#    "sources/meta-introspector/monomcp-rust/monomcp/turbomcp/crates/turbomcp-core",
#    "sources/meta-introspector/monomcp-rust/monomcp/turbomcp/crates/turbomcp-macros",
#    "sources/meta-introspector/monomcp-rust/monomcp/turbomcp/crates/turbomcp-protocol",
#    "sources/meta-introspector/monomcp-rust/monomcp/turbomcp/crates/turbomcp-server",
#    "sources/meta-introspector/monomcp-rust/monomcp/turbomcp/crates/turbomcp-transport",
#    "sources/meta-introspector/monomcp-rust/monomcp/turbomcp/demo",
#    "sources/meta-introspector/monomcp-rust/monomcp/vendor/hugging-face-dataset-validator-rust",
#    "sources/meta-introspector/monomcp-rust/project_reporter", # Add project_reporter as a member
#    "sources/meta-introspector/monomcp-rust/monomcp/models/diagram/mermaid/fuzzing",
#    "sources/meta-introspector/monomcp-rust/monomcp/models/diagram/mermaid/hash_repro_crate",
#    "sources/meta-introspector/monomcp-rust/monomcp/generative_modular_forms",
 "zos",
    "tools/latex_compiler_tool",
    #"tools/cargo2mcp-server",
    "cargo-mcp-wrapper",
    "my-new-crate",
]




 [workspace.dependencies]
# MoCoPr dependencies
serde = { version = "1.0.197", features = ["derive", "rc"] }
serde_json = { version = "1.0.115", features = ["raw_value", "preserve_order"] }
tokio = { version = "1.37.0", features = ["full"] }
anyhow = "1.0.82"
thiserror = "1.0.61"
uuid = { version = "1.9.1", features = ["v4", "serde"] }
chrono = { version = "0.4.41", features = ["serde"] }
arrow-arith = { version = "56.1.0", path = "sources/meta-introspector/monomcp-rust/monomcp/vendor/arrow-rs/arrow-arith" }
url = { version = "2.0", features = ["serde"] }
async-trait = "0.1.80"
futures = "0.3.30"
tracing = "0.1.41"
tracing-subscriber = { version = "0.3.19", features = ["env-filter", "std", "fmt", "json", "tracing-log"] }
reqwest = { version = "0.12.5", default-features = false, features = ["json", "stream", "rustls-tls", "http2", "brotli", "gzip", "cookies", "multipart"] }
tokio-tungstenite = { version = "0.23", features = ["native-tls"] }
smallvec = { version = "1.15.1", features = ["serde"] }
tower = { version = "0.5", features = ["full"] }
tower-http = { version = "0.5", features = ["cors", "trace", "full"] }
axum = { version = "0.8", features = ["ws", "tracing", "macros"] }
tokio-process = "0.2"
proc-macro2 = "1.0"
quote = "1.0"
syn = { version = "2.0", features = ["full"] }
tokio-test = "0.4"
criterion = { version = "0.5", features = ["html_reports"] }
rayon = "1.0"
num_cpus = "1.16"

# agentic dependencies
crossterm = "0.27.0"
figment = { version = "0.10.19", features = ["toml", "env"] }
ratatui = { version = "0.26.2", features = ["crossterm"] }
toml = "0.8.12"
taffy = "0.4.0"
directories = "5.0.1"
strum = { version = "0.27", features = ["derive"] }
strum_macros = "0.26.3"
itertools = "0.13.0"
lazy_static = "1.5.0"
signal-hook = "0.3.17"
textwrap = "0.16.1"
unicode-width = "0.1.13"
#chrono = { version = "0.4.38", features = ["serde"] }

# rust-mcp-sdk dependencies
# rust-mcp-sdk dependencies
#rust-mcp-transport = { version = "0.5.0", path = "sources/meta-introspector/monomcp-rust/monomcp/rust-mcp-sdk/crates/rust-mcp-transport", default-features = false }
#rust-mcp-sdk = { version = "0.5.0", path = "sources/meta-introspector/monomcp-rust/monomcp/rust-mcp-sdk/crates/rust-mcp-sdk", default-features = false }
#rust-mcp-macros = { version = "0.5.1", path = "sources/meta-introspector/monomcp-rust/monomcp/rust-mcp-sdk/crates/rust-mcp-macros", default-features = false }
#rust-mcp-schema = { version = "0.7", default-features = false }
#tokio-stream = "0.1"
#rustls = "0.23"
#tokio-rustls = "0.26"
#axum-server = { version = "0.7" }
#bytes = "1.10"

# turbomcp dependencies
tokio-util = { version = "0.7", features = ["full"] }
pin-project-lite = "0.2"
walkdir = "2.4"
rmp-serde = "1.1"
sonic-rs = "0.3"
simd-json = "0.13"
bincode = "1.3"
serde_cbor = "0.11"
schemars = { version = "0.8", features = ["chrono", "uuid1"] }
jsonschema = "0.17"
hyper = { version = "1.0", features = ["full"] }
hyper-util = { version = "0.1", features = ["full"] }

miette = { version = "7.0", features = ["fancy"] }
color-eyre = "0.6"
tracing-opentelemetry = "0.22"
opentelemetry = { version = "0.21", features = ["rt-tokio"] }
opentelemetry-otlp = "0.14"
metrics = "0.22"
metrics-exporter-prometheus = "0.13"
parking_lot = "0.12"
dashmap = "5.5"
crossbeam = "0.8"
crossbeam-channel = "0.5"
flume = "0.11"
config = "0.14"
clap = { version = "4.5", features = ["derive", "env", "color"] }
clap_complete = "4.4"
ring = "0.17"
base64 = "0.22"

jsonwebtoken = "9.2"
time = { version = "0.3", features = ["serde", "macros"] }
compact_str = { version = "0.7", features = ["serde"] }
ahash = "0.8"
once_cell = "1.19"
arc-swap = "1.6"
proptest = "1.4"
wiremock = "0.5"
pretty_assertions = "1.4"
insta = { version = "1.34", features = ["json", "redactions"] }
rand = "0.8"
quickcheck = "1.0"
quickcheck_macros = "1.0"
mock_instant = "0.3"
serial_test = "3.0"
tempfile = "3.8"
sha2 = "0.10"
doc-comment = "0.3"

# mcp-attr dependencies
uri-template-ex = "0.0.2"

# mcp-discovery dependencies
regex = "1.11.1"

# ramparts dependencies
dirs = "6.0"
futures-util = "0.3.31"

[workspace.package]
version = "0.1.0"
edition = "2024"
rust-version = "1.85.0"
license = "MIT OR Apache-2.0"
authors = ["Eric Evans <ciresnave@gmail.com>"]
repository = "https://github.com/ciresnave/mocopr"
homepage = "https://github.com/ciresnave/mocopr"
documentation = "https://docs.rs/mocopr"
description = "A comprehensive Rust implementation of the Model Context Protocol (MCP)"
keywords = ["mcp", "model-context", "ai", "llm", "jsonrpc"]
categories = ["api-bindings", "network-programming"]

[workspace.lints.rust]
# TODO: enable this
# unused_qualifications = "warn"

[workspace.lints.clippy]
pedantic = { level = "warn", priority = -1 }
#
# Reviewed and allowed lints
needless_continue = "allow"
enum_glob_use = "allow"  # x97
missing_errors_doc = "allow"  # x1792
missing_panics_doc = "allow"  # x447
module_name_repetitions = "allow"  # x125
must_use_candidate = "allow"  # x1696
#
# Lints that we may want to forbid in the future
default_trait_access = "allow"  # x709
doc_markdown = "allow"  # x552
cast_possible_truncation = "allow"  # x216
needless_pass_by_value = "allow"  # x205
return_self_not_must_use = "allow"  # x204
unreadable_literal = "allow"  # x169
items_after_statements = "allow"  # x164
single_match_else = "allow"  # x162
too_many_lines = "allow"  # x161
unnecessary_wraps = "allow"  # x110
match_same_arms = "allow"  # x99
cast_lossless = "allow"  # x91
ignored_unit_patterns = "allow"  # x80
used_underscore_binding = "allow"  # x75
needless_raw_string_hashes = "allow"  # x75
implicit_clone = "allow"  # x70
manual_let_else = "allow"  # x64
cast_precision_loss = "allow"  # x56
trivially_copy_pass_by_ref = "allow"  # x43
redundant_else = "allow"  # x42
if_not_else = "allow"  # x37
match_wildcard_for_single_variants = "allow"  # x35
cast_sign_loss = "allow"  # x35
similar_names = "allow"  # x32
struct_excessive_bools = "allow"  # x29
cast_possible_wrap = "allow"  # x26
explicit_iter_loop = "allow"  # x24
explicit_into_iter_loop = "allow"  # x22
explicit_deref_methods = "allow"  # x22
inconsistent_struct_constructor = "allow"  # x18
range_plus_one = "allow"  # x17
inefficient_to_string = "allow"  # x14
from_iter_instead_of_collect = "allow"  # x13
unused_self = "allow"  # x10
many_single_char_names = "allow"  # x10
manual_string_new = "allow"  # x10
iter_not_returning_iterator = "allow"  # x10
option_option = "allow"  # x9
inline_always = "allow"  # x8
manual_assert = "allow"  # x7
iter_without_into_iter = "allow"  # x6
copy_iterator = "allow"  # x6
should_panic_without_expect = "allow"  # x5
transmute_ptr_to_ptr = "allow"  # x4
match_wild_err_arm = "allow"  # x4
manual_is_variant_and = "allow"  # x4
bool_to_int_with_if = "allow"  # x4
struct_field_names = "allow"  # x3
wildcard_imports = "allow"  # x2
needless_for_each = "allow"  # x2
naive_bytecount = "allow"  # x2
mut_mut = "allow"  # x2
match_bool = "allow"  # x2
fn_params_excessive_bools = "allow"  # x2
filter_map_next = "allow"  # x2
checked_conversions = "allow"  # x2
borrow_as_ptr = "allow"  # x2
unnecessary_join = "allow"  # x1
stable_sort_primitive = "allow"  # x1
no_effect_underscore_binding = "allow"  # x1
empty_docs = "allow"
too_long_first_doc_paragraph = "allow"
large_stack_arrays = "allow"

# Fix one day
result_large_err = "allow"
large_enum_variant = "allow"

[package]
name = "submodules"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
toml = "0.8"
clap = { version = "4.0", features = ["derive"] } # For command-line argument parsing
regex = "1.0"
walkdir = "2.5"

[dev-dependencies]
iai-callgrind = "0.8"

[[bin]]
name = "git-config-parser"
path = "src/bin/git-config-parser.rs"

[[bin]]
name = "crq-parser-cli"
path = "src/bin/crq-parser-cli.rs"

[[bin]]
name = "state-word-reporter"
path = "src/bin/state-word-reporter.rs"

[[bin]]
name = "ngram-reporter"
path = "src/bin/ngram_reporter.rs"

[[bench]]
name = "my_profiling_bench"
path = "benches/my_profiling_bench.rs"
harness = false
